unit frmTotemPrincipal;

interface

uses
  Winapi.Windows, Winapi.Messages, Winapi.ShellAPI,
  System.SysUtils, System.Types, System.UITypes, System.Classes, System.Variants,
  FMX.Types, FMX.Controls, FMX.Forms, FMX.Graphics, FMX.Dialogs, FMX.Objects,
  FMX.Controls.Presentation, FMX.StdCtrls, FMX.Effects, FMX.Layouts, FMX.Edit,
  FMX.ListBox, FMX.TabControl, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf, FireDAC.Stan.Def,
  FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys, FireDAC.Phys.FB,
  FireDAC.Phys.FBDef, FireDAC.FMXUI.Wait, FireDAC.Stan.Param, FireDAC.DatS,
  FireDAC.DApt.Intf, FireDAC.DApt, Data.Bind.EngExt, Fmx.Bind.DBEngExt,
  System.Rtti, System.Bindings.Outputs, Fmx.Bind.Editors, Data.Bind.Components,
  Data.Bind.DBScope, Data.DB, FireDAC.Comp.DataSet, FireDAC.Comp.Client,
  Frame.MarthiGIT.Totem, System.Math, System.IniFiles, Untfuncoes,
  FireDAC.Phys.IBBase, MyVirtualKeyboard, FMX.Filter.Effects, FMX.Ani;

type
  TTotemPrincipalfrm = class(TForm)
    VertScrollBox1: TVertScrollBox;
    lytTop: TLayout;
    lytModelo: TLayout;
    lytCenter: TLayout;
    Layout3: TLayout;
    StyleBook1: TStyleBook;
    lytRodape: TLayout;
    ConectMarthi: TFDConnection;
    qryCadCell: TFDQuery;
    qryImagensCell: TFDQuery;
    qryImagensCellCELL_ID: TIntegerField;
    qryImagensCellSEQUENCIA: TIntegerField;
    qryImagensCellIMAGE: TBlobField;
    dtsImagensCell: TBindSourceDB;
    BindingsList1: TBindingsList;
    lytGlobal: TLayout;
    lytToten: TLayout;
    Rectangle8: TRectangle;
    Rectangle10: TRectangle;
    Rectangle11: TRectangle;
    dtsCadCell: TBindSourceDB;
    FBLink: TFDPhysFBDriverLink;
    qryCapacidades: TFDQuery;
    qryCapacidadesARMAZENAMENTO_DESC: TStringField;
    qryCores: TFDQuery;
    qryCoresCOR_DESC: TStringField;
    Rectangle4: TRectangle;
    qryDadosCor: TFDQuery;
    qryDadosCorCELL_VAL_UNIT: TFMTBCDField;
    qryDadosCorCELL_VAL_PARC: TFMTBCDField;
    qryDadosCorARMAZENAMENTO_DESC: TStringField;
    qryCapacidadesARMAZENAMENTO_ID: TIntegerField;
    qryCoresCOR_ID: TIntegerField;
    qryCadCellCELL_ID: TIntegerField;
    qryCadCellCELL_DESC: TStringField;
    qryCadCellCELL_MARCA: TIntegerField;
    qryDadosCorARMAZENAMENTO_ID: TIntegerField;
    ShadowEffect7: TShadowEffect;
    ShadowEffect8: TShadowEffect;
    Label3: TLabel;
    Label5: TLabel;
    btnIphone: TRectangle;
    img1: TImage;
    Label1: TLabel;
    btnXiaomi: TRectangle;
    img2: TImage;
    Label2: TLabel;
    Rectangle5: TRectangle;
    Layout1: TLayout;
    Rectangle3: TRectangle;
    Layout2: TLayout;
    img3: TImage;
    qryRetirada: TFDQuery;
    qryRetiradaTP_PRECO_ID: TIntegerField;
    qryRetiradaTP_PRECO_DESC: TStringField;
    Label4: TLabel;
    Label6: TLabel;
    edtPesquisa: TEdit;
    ShadowEffect1: TShadowEffect;
    ShadowEffect2: TShadowEffect;
    Rectangle2: TRectangle;
    Label10: TLabel;
    Label9: TLabel;
    BevelEffect1: TBevelEffect;
    procedure FormCreate(Sender: TObject);
    procedure edtPesquisaEnter(Sender: TObject);
    procedure edtPesquisaExit(Sender: TObject);
    procedure edtPesquisaTyping(Sender: TObject);
    procedure btnFecharClick(Sender: TObject);
    procedure btnIphoneClick(Sender: TObject);
    procedure btnXiaomiClick(Sender: TObject);
  private
    { Private declarations }
    procedure CarregarDados;
    procedure AjustarAlturaScrollBox(ScrollBox: TVertScrollBox);
    procedure CarregarImagensHorizontais(Frame: TFrameTotem; CellID: Integer);
    procedure CarregaComboBox(Frame: TFrameTotem;
  CellID: Integer; FindCombo, FieldID, FieldDesc : string; oQuery: TFDQuery);
    procedure MostrarTecladoVirtual;
    procedure OcultarTecladoVirtual;
    procedure CorChange(Sender: TObject);
    procedure CapacidadeChange(Sender: TObject);
    procedure RetiradaChange(Sender: TObject);
    procedure EnviaWhatsapp(Sender: TObject);
    procedure OnEnterNomeCli(Sender: TObject);
    procedure OnEnterTelCli(Sender: TObject);
  public
    { Public declarations }
  end;

var
  TotemPrincipalfrm: TTotemPrincipalfrm;
  IsKeyboardShown: Boolean = False;

implementation

{$R *.fmx}
{$R *.Surface.fmx MSWINDOWS}
{$R *.Moto360.fmx ANDROID}
{$R *.iPhone55in.fmx IOS}
{$R *.iPad.fmx IOS}
{$R *.Windows.fmx MSWINDOWS}

{ TTotemPrincipalfrm }

procedure TTotemPrincipalfrm.CapacidadeChange(Sender: TObject);
var
  ComboBox: TComboBox;
  CapacidadeID, CorID: Integer;
  qryDados: TFDQuery;
  ParentObject: TFmxObject;
  Frame: TFrameTotem;
begin
  ComboBox := Sender as TComboBox;

  // Encontra o Frame pai do ComboBox
  ParentObject := ComboBox.Parent;
  while (ParentObject <> nil) and not (ParentObject is TFrameTotem) do
    ParentObject := ParentObject.Parent;

  if not (ParentObject is TFrameTotem) then
    Exit;

  Frame := TFrameTotem(ParentObject);

  // Verifica se uma capacidade foi selecionada
  if ComboBox.ItemIndex = -1 then
    Exit;

  // Obtém o ID da capacidade selecionada
  CapacidadeID := Integer(ComboBox.Items.Objects[ComboBox.ItemIndex]);

  // Obtém o ID da cor selecionada
  if Frame.cbbCor.ItemIndex >= 0 then
    CorID := Integer(Frame.cbbCor.Items.Objects[Frame.cbbCor.ItemIndex])
  else
    Exit;

   qryDados := TFDQuery.Create(nil);
  try
    qryDados.Connection := ConectMarthi; // Substitua pelo seu componente de conexão
    qryDados.SQL.Text :=
      'SELECT CELL_ITENS.CELL_VAL_UNIT, CELL_ITENS.CELL_VAL_PARC ' +
      'FROM CELL_ITENS ' +
      'WHERE CELL_ITENS.COR_ID = :COR_ID AND CELL_ITENS.ARMAZENAMENTO_ID = :ARMAZENAMENTO_ID';
    qryDados.ParamByName('COR_ID').AsInteger := CorID;
    qryDados.ParamByName('ARMAZENAMENTO_ID').AsInteger := CapacidadeID;
    qryDados.Open;

    if not qryDados.IsEmpty then
    begin
      Frame.lblValorAVista.Text := Format('R$ %.2f', [qryDados.FieldByName('CELL_VAL_UNIT').AsFloat]);
      Frame.lblValorAPrazo.Text := '12 X ' + Format('R$ %.2f', [qryDados.FieldByName('CELL_VAL_PARC').AsFloat]);
    end
    else
    begin
      Frame.lblValorAVista.Text := 'R$ 0,00';
      Frame.lblValorAPrazo.Text := 'R$ 0,00';
    end;
  finally
    qryDados.Free;
  end;
end;

procedure TTotemPrincipalfrm.CorChange(Sender: TObject);
var
  ComboBox: TComboBox;
  CorID: Integer;
  ParentObject: TFmxObject;
  Frame: TFrameTotem;
begin
  ComboBox := Sender as TComboBox;

  // Encontra o Frame pai do ComboBox
  ParentObject := ComboBox.Parent;
  while (ParentObject <> nil) and not (ParentObject is TFrameTotem) do
    ParentObject := ParentObject.Parent;

  if not (ParentObject is TFrameTotem) then
    Exit;

  Frame := TFrameTotem(ParentObject);

  // Verifica se uma capacidade foi selecionada
  if ComboBox.ItemIndex = -1 then
    Exit;

  // Obtém o ID da cor selecionada
  if Frame.cbbCor.ItemIndex >= 0 then
    CorID := Integer(Frame.cbbCor.Items.Objects[Frame.cbbCor.ItemIndex])
  else
    Exit;

  try
    qryDadosCor.ParamByName('COR_ID').AsInteger := CorID;
    qryDadosCor.Open;

    // Atualiza os labels e o ComboBox de capacidade
    if not qryDadosCor.IsEmpty then
    begin
      Frame.lblValorAVista.Text := Format('R$ %.2f', [qryDadosCor.FieldByName('CELL_VAL_UNIT').AsFloat]);
      Frame.lblValorAPrazo.Text := '12 X ' + Format('R$ %.2f', [qryDadosCor.FieldByName('CELL_VAL_PARC').AsFloat]);

      Frame.cbbCapacidade.OnChange := nil;
      Frame.cbbCapacidade.Items.Clear;
      while not qryDadosCor.Eof do
      begin
        Frame.cbbCapacidade.Items.AddObject(qryDadosCor.FieldByName('ARMAZENAMENTO_DESC').AsString,
                        TObject(qryDadosCor.FieldByName('ARMAZENAMENTO_ID').AsInteger));
        qryDadosCor.Next;
      end;

      // Seleciona automaticamente o primeiro item, se houver
      if Frame.cbbCapacidade.Items.Count > 0 then
        Frame.cbbCapacidade.ItemIndex := 0;
    end
    else
    begin
      Frame.lblValorAVista.Text := 'R$ 0,00';
      Frame.lblValorAPrazo.Text := 'R$ 0,00';
      Frame.cbbCapacidade.Items.Clear;
    end;
  finally
    Frame.cbbCapacidade.OnChange := CapacidadeChange;
    qryDadosCor.Close;
  end;
end;

procedure TTotemPrincipalfrm.CarregarDados;
var
  Frame: TFrameTotem;
  Cont, CellID: Integer;
  CorID: Integer;
begin
  qryCadCell.Close;
  qryCadCell.Open;

  Cont := 0;
  while VertScrollBox1.Content.ControlsCount > 0 do
    VertScrollBox1.Content.Controls[0].Free;

  dtsCadCell.DataSet.First;
  while not dtsCadCell.DataSet.Eof do
  begin
    Inc(Cont);
    Frame := TFrameTotem.Create(VertScrollBox1);
    Frame.Name := 'Frame' + IntToStr(Cont);
    Frame.Parent := VertScrollBox1;
    Frame.Align := TAlignLayout.Top;
    Frame.tbcTotem.ActiveTab := Frame.TabTotemPrincipal;

    Frame.Margins.Top := 5;
    Frame.Margins.Bottom := 5;

    Frame.lblNomeItem.Text := dtsCadCell.DataSet.FieldByName('CELL_DESC').AsString;

    CellID := dtsCadCell.DataSet.FieldByName('CELL_ID').AsInteger;
    CarregarImagensHorizontais(Frame, CellID);
    // Preenche Combobox de cor
    CarregaComboBox(Frame,CellID,'cbbCor', 'COR_ID', 'COR_DESC',qryCores);
    // Preenche Combobox de Capacidade
    CarregaComboBox(Frame,CellID,'cbbCapacidade', 'ARMAZENAMENTO_ID', 'ARMAZENAMENTO_DESC',qryCapacidades);
    // Preenche Combobox de Retirada
    CarregaComboBox(Frame,CellID,'cbbRetirada', 'TP_PRECO_ID', 'TP_PRECO_DESC',qryRetirada);

//    CarregarCapacidades(Frame, CellID);
//    CarregarCores(Frame, CellID);

    Frame.CELL_MARCA.Text := dtsCadCell.DataSet.FieldByName('CELL_MARCA').AsString;

    // Obtém o ID da cor selecionada
    if Frame.cbbCor.ItemIndex >= 0 then
      CorID := Integer(Frame.cbbCor.Items.Objects[Frame.cbbCor.ItemIndex])
    else
      Exit;

    try
      qryDadosCor.ParamByName('COR_ID').AsInteger := CorID;
      qryDadosCor.Open;

      // Atualiza os labels e o ComboBox de capacidade
      if not qryDadosCor.IsEmpty then
      begin
        Frame.lblValorAVista.Text := Format('R$ %.2f', [qryDadosCor.FieldByName('CELL_VAL_UNIT').AsFloat]);
        Frame.lblValorAPrazo.Text := '12 X ' + Format('R$ %.2f', [qryDadosCor.FieldByName('CELL_VAL_PARC').AsFloat]);
      end
      else
      begin
        Frame.lblValorAVista.Text := 'R$ 0,00';
        Frame.lblValorAPrazo.Text := 'R$ 0,00';
      end;
    finally
      qryDadosCor.Close;
    end;

    // Atribuir o evento OnChange
    Frame.cbbCor.OnChange := CorChange;
    Frame.cbbCapacidade.OnChange := CapacidadeChange;
    Frame.cbbRetirada.OnChange := RetiradaChange;
    // Atribuir o evento OnClick
    Frame.btnEnviaWhatsapp.OnClick := EnviaWhatsapp;
    // Atribuir o evento OnEnter
    Frame.edtNomeCli.OnEnter := OnEnterNomeCli;
    Frame.edtTelCli.OnEnter := OnEnterTelCli;

    dtsCadCell.DataSet.Next;
  end;

  AjustarAlturaScrollBox(VertScrollBox1);
end;

procedure TTotemPrincipalfrm.MostrarTecladoVirtual;
begin
  ShellExecute(0, 'open', 'C:\Windows\System32\osk.exe', nil, nil, SW_SHOWNORMAL);
end;

procedure TTotemPrincipalfrm.OcultarTecladoVirtual;
var
  hwnd: Winapi.Windows.HWND;
begin
  hwnd := FindWindow(nil, 'Teclado Virtual');
  if hwnd <> 0 then
    PostMessage(hwnd, WM_CLOSE, 0, 0);
end;

procedure TTotemPrincipalfrm.OnEnterNomeCli(Sender: TObject);
begin
  if not IsKeyboardShown then
  begin
    ShowKeyboardOn(TEdit(Sender));
    IsKeyboardShown := True; // Marca como exibido
  end
  else
    IsKeyboardShown := False;
end;

procedure TTotemPrincipalfrm.OnEnterTelCli(Sender: TObject);
begin
  if not IsKeyboardShown then
  begin
    ShowKeyboardOn(TEdit(Sender));
    IsKeyboardShown := True; // Marca como exibido
  end
  else
    IsKeyboardShown := False;
end;

procedure TTotemPrincipalfrm.RetiradaChange(Sender: TObject);
var
  ComboBox: TComboBox;
  CapacidadeID, CorID, RetiradaID: Integer;
  qryDados: TFDQuery;
  ParentObject: TFmxObject;
  Frame: TFrameTotem;
begin
  ComboBox := Sender as TComboBox;

  // Encontra o Frame pai do ComboBox
  ParentObject := ComboBox.Parent;
  while (ParentObject <> nil) and not (ParentObject is TFrameTotem) do
    ParentObject := ParentObject.Parent;

  if not (ParentObject is TFrameTotem) then
    Exit;

  Frame := TFrameTotem(ParentObject);

  // Verifica se uma capacidade foi selecionada
  if ComboBox.ItemIndex = -1 then
    Exit;

  // Obtém o ID da capacidade selecionada
  CapacidadeID := Integer(ComboBox.Items.Objects[ComboBox.ItemIndex]);

  // Obtém o ID da cor selecionada
  if Frame.cbbCor.ItemIndex >= 0 then
    CorID := Integer(Frame.cbbCor.Items.Objects[Frame.cbbCor.ItemIndex])
  else
    Exit;

   qryDados := TFDQuery.Create(nil);
  try
    qryDados.Connection := ConectMarthi; // Substitua pelo seu componente de conexão
    qryDados.SQL.Text :=
      'SELECT CELL_ITENS.CELL_VAL_UNIT, CELL_ITENS.CELL_VAL_PARC ' +
      'FROM CELL_ITENS ' +
      'WHERE CELL_ITENS.COR_ID = :COR_ID ' +
      '  AND CELL_ITENS.ARMAZENAMENTO_ID = :ARMAZENAMENTO_ID' +
      '  AND CELL_TP_PRECOS.TP_PRECO_ID  = :TP_PRECO_ID';
    qryDados.ParamByName('COR_ID').AsInteger := CorID;
    qryDados.ParamByName('ARMAZENAMENTO_ID').AsInteger := CapacidadeID;
    qryDados.ParamByName('TP_PRECO_ID').AsInteger := RetiradaID;
    qryDados.Open;

    if not qryDados.IsEmpty then
    begin
      Frame.lblValorAVista.Text := Format('R$ %.2f', [qryDados.FieldByName('CELL_VAL_UNIT').AsFloat]);
      Frame.lblValorAPrazo.Text := '12 X ' + Format('R$ %.2f', [qryDados.FieldByName('CELL_VAL_PARC').AsFloat]);
    end
    else
    begin
      Frame.lblValorAVista.Text := 'R$ 0,00';
      Frame.lblValorAPrazo.Text := 'R$ 0,00';
    end;
  finally
    qryDados.Free;
  end;

end;

procedure TTotemPrincipalfrm.btnFecharClick(Sender: TObject);
begin
  Close;
end;

procedure TTotemPrincipalfrm.btnIphoneClick(Sender: TObject);
var
  Frame: TFrameTotem;
  i: Integer;
begin
  // Filtra os frames para exibir apenas os com CELL_MARCA = 0 (iPhone)
  for i := 0 to VertScrollBox1.Content.ControlsCount - 1 do
  begin
    Frame := TFrameTotem(VertScrollBox1.Content.Controls[i]);

    // Verifica se o frame corresponde à marca iPhone (CELL_MARCA = 0)
    if (StrToInt(Frame.CELL_MARCA.Text) = 0) then
      Frame.Visible := True
    else
      Frame.Visible := False; // Esconde os frames que não correspondem
  end;

end;

procedure TTotemPrincipalfrm.btnXiaomiClick(Sender: TObject);
var
  Frame: TFrameTotem;
  i: Integer;
begin
  // Filtra os frames para exibir apenas os com CELL_MARCA = 1 (Xiaomi)
  for i := 0 to VertScrollBox1.Content.ControlsCount - 1 do
  begin
    Frame := TFrameTotem(VertScrollBox1.Content.Controls[i]);

    // Verifica se o frame corresponde à marca Xiaomi (CELL_MARCA = 1)
    if (StrToInt(Frame.CELL_MARCA.Text) = 1) then
      Frame.Visible := True
    else
      Frame.Visible := False; // Esconde os frames que não correspondem
  end;
end;

procedure TTotemPrincipalfrm.CarregaComboBox(Frame: TFrameTotem;
  CellID: Integer; FindCombo, FieldID, FieldDesc : string; oQuery: TFDQuery);
var
  ComboBox: TComboBox;
begin
  // Localiza o ComboBox de cor no frame
  ComboBox := Frame.FindComponent(FindCombo) as TComboBox;
  if not Assigned(ComboBox) then
    Exit;

  oQuery.Close;
  oQuery.ParamByName('CELL_ID').AsInteger := CellID;
  oQuery.Open;

  ComboBox.Items.Clear;
  while not oQuery.Eof do
  begin
    ComboBox.Items.AddObject(oQuery.FieldByName(FieldDesc).AsString,
                        TObject(oQuery.FieldByName(FieldID).AsInteger));
    oQuery.Next;
  end;

  if ComboBox.Items.Count > 0 then
    ComboBox.ItemIndex := 0; // Seleciona o primeiro item por padrão

end;

procedure TTotemPrincipalfrm.CarregarImagensHorizontais(Frame: TFrameTotem; CellID: Integer);
var
  ImageQuery: TFDQuery; // Ajuste para o componente de banco que você usa
  ImageStream: TMemoryStream;
  BlobField: TBlobField;
  CloneRect: TRectangle;
  CurrentLeft: Single;
  imgWidth, imgHeight : double;
begin
  Frame.HorzScrollBoxImagens.BeginUpdate; // Evita flickering
  try
    //Frame.HorzScrollBoxImagens.Content.DeleteChildren; // Remove conteúdos antigos
    CurrentLeft := 0;

    ImageQuery := TFDQuery.Create(nil);
    try
      ImageQuery.Connection := ConectMarthi; // Substitua pela sua conexão
      ImageQuery.SQL.Text := 'SELECT IMAGE FROM CELL_IMAGES WHERE CELL_ID = :CELL_ID';
      ImageQuery.ParamByName('CELL_ID').AsInteger := CellID;
      ImageQuery.Open;

      while not ImageQuery.Eof do
      begin
        // Clona o retângulo `imgCell` existente no Frame
        CloneRect := TRectangle.Create(Frame.HorzScrollBoxImagens);
        CloneRect.Parent := Frame.HorzScrollBoxImagens;
        CloneRect.Width := Frame.imgCell.Width;
        CloneRect.Height := Frame.imgCell.Height;
        CloneRect.Margins.Top := 5;
        CloneRect.Margins.Left := 5;
        CloneRect.Margins.Right := 3;
        CloneRect.Margins.Bottom := 5;
        CloneRect.Position.X := CurrentLeft; // Posição horizontal
        CloneRect.Position.Y := 0; // Centralizado verticalmente
        CloneRect.Stroke.Kind := Frame.imgCell.Stroke.Kind;
        CloneRect.Stroke.Color := Frame.imgCell.Stroke.Color;
        CloneRect.Stroke.Thickness := 0;
        CloneRect.Fill.Kind := TBrushKind.Bitmap; // Define o preenchimento como bitmap
        CloneRect.Fill.Bitmap.WrapMode := TWrapMode.TileStretch; // Define o preenchimento como bitmap
        //CloneRect.Corners := [TCorner.TopLeft, TCorner.BottomLeft];
        CloneRect.SendToBack;
        CloneRect.YRadius := 10;
        CloneRect.XRadius := 10;

        // Carrega a imagem do banco
        BlobField := ImageQuery.FieldByName('IMAGE') as TBlobField;
        if not BlobField.IsNull then
        begin
          ImageStream := TMemoryStream.Create;
          try
            BlobField.SaveToStream(ImageStream);
            ImageStream.Position := 0;
            CloneRect.Fill.Bitmap.Bitmap.LoadFromStream(ImageStream); // Aplica a imagem
          finally
            ImageStream.Free;
          end;
        end
        else
        begin
          // Caso não haja imagem, usa cor padrão
          CloneRect.Fill.Kind := TBrushKind.Solid;
          CloneRect.Fill.Color := TAlphaColors.Gray;
        end;

        // Ajusta a posição para a próxima imagem
        CurrentLeft := CurrentLeft + CloneRect.Width + 10; // Margem entre imagens

        ImageQuery.Next;
      end;
    finally
      ImageQuery.Free;
    end;
  finally
    Frame.HorzScrollBoxImagens.EndUpdate; // Atualiza interface
  end;
end;

procedure TTotemPrincipalfrm.edtPesquisaEnter(Sender: TObject);
begin
  if not IsKeyboardShown then
  begin
    ShowKeyboardOn(TEdit(Sender));
    IsKeyboardShown := True; // Marca como exibido
  end
  else
    IsKeyboardShown := False;
end;

procedure TTotemPrincipalfrm.edtPesquisaExit(Sender: TObject);
begin
//  IsKeyboardShown := False; // Permite exibir novamente
end;

procedure TTotemPrincipalfrm.edtPesquisaTyping(Sender: TObject);
var
  Frame: TFrameTotem;
  i: Integer;
  SearchText: string;
begin
  // Obtém o texto digitado
  SearchText := edtPesquisa.Text.Trim;

  // Se o campo de pesquisa estiver vazio, mostra todos os frames
  if SearchText = '' then
  begin
    // Torna todos os frames visíveis
    for i := 0 to VertScrollBox1.Content.ControlsCount - 1 do
    begin
      Frame := TFrameTotem(VertScrollBox1.Content.Controls[i]);
      Frame.Visible := True;
    end;
  end
  else
  begin
    // Filtra a consulta com base no texto digitado
    qryCadCell.Filtered := False;
    qryCadCell.Filter := Format('CELL_DESC LIKE %s', [QuotedStr('%' + SearchText + '%')]);
    qryCadCell.Filtered := True;

    // Percorre os frames no ScrollBox e ajusta a visibilidade com base no filtro
    for i := 0 to VertScrollBox1.Content.ControlsCount - 1 do
    begin
      Frame := TFrameTotem(VertScrollBox1.Content.Controls[i]);

      // Verifica se o texto do campo edtPesquisa está na descrição do Frame
      if Frame.lblNomeItem.Text.ToLower.Contains(SearchText.ToLower) then
        Frame.Visible := True  // Torna o frame visível se o texto contiver a descrição
      else
        Frame.Visible := False; // Torna o frame invisível caso contrário
    end;
  end;
end;

procedure TTotemPrincipalfrm.EnviaWhatsapp(Sender: TObject);
var
  Frame: TFrameTotem;
  lFuncoes : TFuncoesUteis;
  ParentObject: TFmxObject;
  btn : TRoundRect;
begin
  btn := Sender as TRoundRect;

  // Encontra o Frame pai do ComboBox
  ParentObject := btn.Parent;
  while (ParentObject <> nil) and not (ParentObject is TFrameTotem) do
    ParentObject := ParentObject.Parent;

  if not (ParentObject is TFrameTotem) then
    Exit;

  Frame := TFrameTotem(ParentObject);

  lFuncoes.EnviarMsgWhatsApp( '8404a52b-690a-422f-be65-3281d55ac4b9', '24981244253', Frame.edtTelCli.Text,
                              'Oi Tudo Bem !! ' + #13 + #13 + 'Sou o ' + Frame.edtNomeCli.Text + #13 +
                              'Acabei de escolher o celular ' + Frame.lblTITULOCEL.Text +
                              ', aqui no Totem do Shopping no valor de R$ ' + Frame.edtValorTel.Text + 'Á Vista ' +
                              'e em 12 X R$ 600,00.' + #13 + #13 +
                              'Poderia me dar mais informações sobre o produto?' , '', False );
end;

procedure TTotemPrincipalfrm.AjustarAlturaScrollBox(ScrollBox: TVertScrollBox);
var
  I: Integer;
  AlturaTotal: Single;
begin
  AlturaTotal := 0;

  // Calcula a altura total dos componentes dentro do Content
  for I := 0 to ScrollBox.Content.ControlsCount - 1 do
  begin
    AlturaTotal := Max(AlturaTotal, ScrollBox.Content.Controls[I].Position.Y + ScrollBox.Content.Controls[I].Height);
  end;

  // Ajusta a altura do conteúdo para incluir todos os elementos
  ScrollBox.Content.Height := AlturaTotal;
end;

procedure TTotemPrincipalfrm.FormCreate(Sender: TObject);
var
 oIniCaminhos : tinifile;
 lFuncoes : TFuncoesUteis;
 sCaminhoIni, sCaminhoApp  : string;
begin

  lFuncoes.ConectaBD_Ini( ConectMarthi, FBLink );

  CarregarDados;
end;

end.
