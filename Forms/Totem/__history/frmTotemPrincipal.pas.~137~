unit frmTotemPrincipal;

interface

uses
  Winapi.Windows, Winapi.Messages, Winapi.ShellAPI,
  System.SysUtils, System.Types, System.UITypes, System.Classes, System.Variants,
  FMX.Types, FMX.Controls, FMX.Forms, FMX.Graphics, FMX.Dialogs, FMX.Objects,
  FMX.Controls.Presentation, FMX.StdCtrls, FMX.Effects, FMX.Layouts, FMX.Edit,
  FMX.ListBox, FMX.TabControl, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf, FireDAC.Stan.Def,
  FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys, FireDAC.Phys.FB,
  FireDAC.Phys.FBDef, FireDAC.FMXUI.Wait, FireDAC.Stan.Param, FireDAC.DatS,
  FireDAC.DApt.Intf, FireDAC.DApt, Data.Bind.EngExt, Fmx.Bind.DBEngExt,
  System.Rtti, System.Bindings.Outputs, Fmx.Bind.Editors, Data.Bind.Components,
  Data.Bind.DBScope, Data.DB, FireDAC.Comp.DataSet, FireDAC.Comp.Client,
  Frame.MarthiGIT.Totem, System.Math, System.IniFiles, Untfuncoes,
  FireDAC.Phys.IBBase;

type
  TTotemPrincipalfrm = class(TForm)
    Rectangle1: TRectangle;
    btnIphone: TRoundRect;
    Label1: TLabel;
    Image1: TImage;
    ShadowEffect2: TShadowEffect;
    ShadowEffect3: TShadowEffect;
    ShadowEffect4: TShadowEffect;
    btnXiaomi: TRoundRect;
    Label2: TLabel;
    Image2: TImage;
    ShadowEffect5: TShadowEffect;
    ShadowEffect6: TShadowEffect;
    VertScrollBox1: TVertScrollBox;
    lytTop: TLayout;
    lytModelo: TLayout;
    lytCenter: TLayout;
    RoundRect3: TRoundRect;
    ShadowEffect9: TShadowEffect;
    Image3: TImage;
    Layout1: TLayout;
    Layout3: TLayout;
    StyleBook1: TStyleBook;
    lytRodape: TLayout;
    Rectangle2: TRectangle;
    Label9: TLabel;
    Label10: TLabel;
    edtPesquisa: TEdit;
    Layout2: TLayout;
    ConectMarthi: TFDConnection;
    qryCadCell: TFDQuery;
    qryImagensCell: TFDQuery;
    qryImagensCellCELL_ID: TIntegerField;
    qryImagensCellSEQUENCIA: TIntegerField;
    qryImagensCellIMAGE: TBlobField;
    dtsImagensCell: TBindSourceDB;
    BindingsList1: TBindingsList;
    lytGlobal: TLayout;
    lytToten: TLayout;
    Rectangle8: TRectangle;
    Rectangle9: TRectangle;
    Rectangle10: TRectangle;
    Rectangle11: TRectangle;
    Layout8: TLayout;
    BindSourceDB2: TBindSourceDB;
    LinkFillControlToField1: TLinkFillControlToField;
    dtsCadCell: TBindSourceDB;
    qryCadCellCELL_ID: TIntegerField;
    qryCadCellCELL_DESC: TStringField;
    qryCadCellCOR_DESC: TStringField;
    qryCadCellARMAZENAMENTO_DESC: TStringField;
    qryCadCellCELL_VAL_UNIT: TFMTBCDField;
    qryCadCellCELL_VAL_PARC: TFMTBCDField;
    Rectangle3: TRectangle;
    Layout4: TLayout;
    FBLink: TFDPhysFBDriverLink;
    qryCapacidades: TFDQuery;
    qryCapacidadesARMAZENAMENTO_DESC: TStringField;
    qryCores: TFDQuery;
    qryCoresCOR_DESC: TStringField;
    qryCadCellCELL_MARCA: TIntegerField;
    procedure FormCreate(Sender: TObject);
    procedure Rectangle3Click(Sender: TObject);
    procedure edtPesquisaEnter(Sender: TObject);
    procedure edtPesquisaExit(Sender: TObject);
    procedure edtPesquisaTyping(Sender: TObject);
    procedure btnIphoneClick(Sender: TObject);
    procedure btnXiaomiClick(Sender: TObject);
  private
    { Private declarations }
    procedure CarregarDados;
    procedure AjustarAlturaScrollBox(ScrollBox: TVertScrollBox);
    procedure CarregarImagensHorizontais(Frame: TFrameTotem; CellID: Integer);
    procedure CarregarCapacidades(Frame: TFrameTotem; CellID: Integer);
    procedure CarregarCores(Frame: TFrameTotem; CellID: Integer);
    procedure MostrarTecladoVirtual;
    procedure OcultarTecladoVirtual;
  public
    { Public declarations }
  end;

var
  TotemPrincipalfrm: TTotemPrincipalfrm;

implementation

{$R *.fmx}
{$R *.Surface.fmx MSWINDOWS}
{$R *.Moto360.fmx ANDROID}
{$R *.iPhone55in.fmx IOS}
{$R *.iPad.fmx IOS}
{$R *.Windows.fmx MSWINDOWS}

{ TTotemPrincipalfrm }

procedure TTotemPrincipalfrm.CarregarDados;
var
  Frame: TFrameTotem;
  LStream: TMemoryStream;
  BlobField: TBlobField;
  Cont, CellID: Integer;
begin
  //Atualiza a qry principal
  qryCadCell.Close;
  qryCadCell.Open;

  Cont := 0;
  // Limpa os componentes existentes no VertScrollBox
  while VertScrollBox1.Content.ControlsCount > 0 do
    VertScrollBox1.Content.Controls[0].Free;

  // Percorre os dados da query
  dtsCadCell.DataSet.First;
  while not dtsCadCell.DataSet.Eof do
  begin
    Inc(Cont);
    // Cria uma instância do frame
    Frame := TFrameTotem.Create(VertScrollBox1);
    Frame.Name := 'Frame' + IntToStr(Cont); // Define um nome único
    Frame.Parent := VertScrollBox1;
    Frame.Align := TAlignLayout.Top;

    Frame.Margins.Top := 5;
    Frame.Margins.Bottom := 5;

    // Atualiza o texto do label
    Frame.lblNomeItem.Text := dtsCadCell.DataSet.FieldByName('CELL_DESC').AsString;
    try
      Frame.lblValorAVista.Text := 'R$ ' + FloatToStrF(dtsCadCell.DataSet.FieldByName('CELL_VAL_UNIT').AsFloat, ffFixed, 15, 2);
    except
      Frame.lblValorAVista.Text := 'R$ 0,00';
    end;

    try
      Frame.lblValorAPrazo.Text := FloatToStrF(dtsCadCell.DataSet.FieldByName('CELL_VAL_PARC').AsFloat, ffFixed, 15, 2);
    except
      Frame.lblValorAPrazo.Text := '';
    end;

    // Obtem o CELL_ID e carrega imagens horizontais
    CellID := dtsCadCell.DataSet.FieldByName('CELL_ID').AsInteger;
    CarregarImagensHorizontais(Frame, CellID);

    // Carrega os ComboBox do frame
    CarregarCapacidades(Frame, CellID);
    CarregarCores(Frame, CellID);
    Frame.CELL_MARCA := dtsCadCell.DataSet.FieldByName('CELL_MARCA').AsInteger; // Definindo a marca do celular

    // Passa para o próximo registro
    dtsCadCell.DataSet.Next;
  end;

  // Ajusta a altura do ScrollBox
  AjustarAlturaScrollBox(VertScrollBox1);
end;

procedure TTotemPrincipalfrm.MostrarTecladoVirtual;
begin
  ShellExecute(0, 'open', 'C:\Windows\System32\osk.exe', nil, nil, SW_SHOWNORMAL);
end;

procedure TTotemPrincipalfrm.OcultarTecladoVirtual;
var
  hwnd: Winapi.Windows.HWND;
begin
  hwnd := FindWindow(nil, 'Teclado Virtual');
  if hwnd <> 0 then
    PostMessage(hwnd, WM_CLOSE, 0, 0);
end;

procedure TTotemPrincipalfrm.btnIphoneClick(Sender: TObject);
var
  Frame: TFrameTotem;
  i: Integer;
begin
  // Filtra os frames para exibir apenas os com CELL_MARCA = 0 (iPhone)
  for i := 0 to VertScrollBox1.Content.ControlsCount - 1 do
  begin
    Frame := TFrameTotem(VertScrollBox1.Content.Controls[i]);

    // Verifica se o frame corresponde à marca iPhone (CELL_MARCA = 0)
    if (StrToInt(Frame.CELL_MARCA) = 0) then
      Frame.Visible := True
    else
      Frame.Visible := False; // Esconde os frames que não correspondem
  end;

end;

procedure TTotemPrincipalfrm.btnXiaomiClick(Sender: TObject);
var
  Frame: TFrameTotem;
  i: Integer;
begin
  // Filtra os frames para exibir apenas os com CELL_MARCA = 1 (Xiaomi)
  for i := 0 to VertScrollBox1.Content.ControlsCount - 1 do
  begin
    Frame := TFrameTotem(VertScrollBox1.Content.Controls[i]);

    // Verifica se o frame corresponde à marca Xiaomi (CELL_MARCA = 1)
    if (StrToInt(Frame.CELL_MARCA) = 1) then
      Frame.Visible := True
    else
      Frame.Visible := False; // Esconde os frames que não correspondem
  end;

end;

procedure TTotemPrincipalfrm.CarregarCapacidades(Frame: TFrameTotem; CellID: Integer);
var
  ComboBox: TComboBox;
begin
  // Localiza o ComboBox de capacidade no frame
  ComboBox := Frame.FindComponent('cbbCapacidade') as TComboBox;
  if not Assigned(ComboBox) then
    Exit;

  qryCapacidades.Close;
  qryCapacidades.ParamByName('CELL_ID').AsInteger := CellID;
  qryCapacidades.Open;

  ComboBox.Items.Clear;
  while not qryCapacidades.Eof do
  begin
    ComboBox.Items.Add(qryCapacidades.FieldByName('ARMAZENAMENTO_DESC').AsString);
    qryCapacidades.Next;
  end;

  if ComboBox.Items.Count > 0 then
    ComboBox.ItemIndex := 0; // Seleciona o primeiro item por padrão
end;

procedure TTotemPrincipalfrm.CarregarCores(Frame: TFrameTotem; CellID: Integer);
var
  ComboBox: TComboBox;
begin
  // Localiza o ComboBox de cor no frame
  ComboBox := Frame.FindComponent('cbbCor') as TComboBox;
  if not Assigned(ComboBox) then
    Exit;

  qryCores.Close;
  qryCores.ParamByName('CELL_ID').AsInteger := CellID;
  qryCores.Open;

  ComboBox.Items.Clear;
  while not qryCores.Eof do
  begin
    ComboBox.Items.Add(qryCores.FieldByName('COR_DESC').AsString);
    qryCores.Next;
  end;

  if ComboBox.Items.Count > 0 then
    ComboBox.ItemIndex := 0; // Seleciona o primeiro item por padrão
end;

procedure TTotemPrincipalfrm.CarregarImagensHorizontais(Frame: TFrameTotem; CellID: Integer);
var
  ImageQuery: TFDQuery; // Ajuste para o componente de banco que você usa
  ImageStream: TMemoryStream;
  BlobField: TBlobField;
  CloneRect: TRectangle;
  CurrentLeft: Single;
  imgWidth, imgHeight : double;
begin
  Frame.HorzScrollBoxImagens.BeginUpdate; // Evita flickering
  try
    //Frame.HorzScrollBoxImagens.Content.DeleteChildren; // Remove conteúdos antigos
    CurrentLeft := 0;

    ImageQuery := TFDQuery.Create(nil);
    try
      ImageQuery.Connection := ConectMarthi; // Substitua pela sua conexão
      ImageQuery.SQL.Text := 'SELECT IMAGE FROM CELL_IMAGES WHERE CELL_ID = :CELL_ID';
      ImageQuery.ParamByName('CELL_ID').AsInteger := CellID;
      ImageQuery.Open;

      while not ImageQuery.Eof do
      begin
        // Clona o retângulo `imgCell` existente no Frame
        CloneRect := TRectangle.Create(Frame.HorzScrollBoxImagens);
        CloneRect.Parent := Frame.HorzScrollBoxImagens;
        CloneRect.Width := Frame.imgCell.Width;
        CloneRect.Height := Frame.imgCell.Height;
        CloneRect.Margins.Top := 0;
        CloneRect.Margins.Left := 0;
        CloneRect.Margins.Right := 3;
        CloneRect.Margins.Bottom := 0;
        CloneRect.Position.X := CurrentLeft; // Posição horizontal
        CloneRect.Position.Y := 0; // Centralizado verticalmente
        CloneRect.Stroke.Kind := Frame.imgCell.Stroke.Kind;
        CloneRect.Stroke.Color := Frame.imgCell.Stroke.Color;
        CloneRect.Stroke.Thickness := 0;
        CloneRect.Fill.Kind := TBrushKind.Bitmap; // Define o preenchimento como bitmap
        CloneRect.Fill.Bitmap.WrapMode := TWrapMode.TileStretch; // Define o preenchimento como bitmap
        CloneRect.XRadius := 10;
        CloneRect.YRadius := 10;
        CloneRect.Corners := [TCorner.TopLeft, TCorner.BottomLeft];
        CloneRect.SendToBack;

        // Carrega a imagem do banco
        BlobField := ImageQuery.FieldByName('IMAGE') as TBlobField;
        if not BlobField.IsNull then
        begin
          ImageStream := TMemoryStream.Create;
          try
            BlobField.SaveToStream(ImageStream);
            ImageStream.Position := 0;
            CloneRect.Fill.Bitmap.Bitmap.LoadFromStream(ImageStream); // Aplica a imagem
          finally
            ImageStream.Free;
          end;
        end
        else
        begin
          // Caso não haja imagem, usa cor padrão
          CloneRect.Fill.Kind := TBrushKind.Solid;
          CloneRect.Fill.Color := TAlphaColors.Gray;
        end;

        // Ajusta a posição para a próxima imagem
        CurrentLeft := CurrentLeft + CloneRect.Width + 10; // Margem entre imagens

        ImageQuery.Next;
      end;
    finally
      ImageQuery.Free;
    end;
  finally
    Frame.HorzScrollBoxImagens.EndUpdate; // Atualiza interface
  end;
end;

procedure TTotemPrincipalfrm.edtPesquisaEnter(Sender: TObject);
begin
  MostrarTecladoVirtual;
end;

procedure TTotemPrincipalfrm.edtPesquisaExit(Sender: TObject);
begin
  OcultarTecladoVirtual;
end;

procedure TTotemPrincipalfrm.edtPesquisaTyping(Sender: TObject);
var
  Frame: TFrameTotem;
  i: Integer;
  SearchText: string;
begin
  // Obtém o texto digitado
  SearchText := edtPesquisa.Text.Trim;

  // Se o campo de pesquisa estiver vazio, mostra todos os frames
  if SearchText = '' then
  begin
    // Torna todos os frames visíveis
    for i := 0 to VertScrollBox1.Content.ControlsCount - 1 do
    begin
      Frame := TFrameTotem(VertScrollBox1.Content.Controls[i]);
      Frame.Visible := True;
    end;
  end
  else
  begin
    // Filtra a consulta com base no texto digitado
    qryCadCell.Filtered := False;
    qryCadCell.Filter := Format('CELL_DESC LIKE %s', [QuotedStr('%' + SearchText + '%')]);
    qryCadCell.Filtered := True;

    // Percorre os frames no ScrollBox e ajusta a visibilidade com base no filtro
    for i := 0 to VertScrollBox1.Content.ControlsCount - 1 do
    begin
      Frame := TFrameTotem(VertScrollBox1.Content.Controls[i]);

      // Verifica se o texto do campo edtPesquisa está na descrição do Frame
      if Frame.lblNomeItem.Text.ToLower.Contains(SearchText.ToLower) then
        Frame.Visible := True  // Torna o frame visível se o texto contiver a descrição
      else
        Frame.Visible := False; // Torna o frame invisível caso contrário
    end;
  end;
end;

procedure TTotemPrincipalfrm.AjustarAlturaScrollBox(ScrollBox: TVertScrollBox);
var
  I: Integer;
  AlturaTotal: Single;
begin
  AlturaTotal := 0;

  // Calcula a altura total dos componentes dentro do Content
  for I := 0 to ScrollBox.Content.ControlsCount - 1 do
  begin
    AlturaTotal := Max(AlturaTotal, ScrollBox.Content.Controls[I].Position.Y + ScrollBox.Content.Controls[I].Height);
  end;

  // Ajusta a altura do conteúdo para incluir todos os elementos
  ScrollBox.Content.Height := AlturaTotal;
end;

procedure TTotemPrincipalfrm.FormCreate(Sender: TObject);
var
 oIniCaminhos : tinifile;
 lFuncoes : TFuncoesUteis;
 sCaminhoIni, sCaminhoApp  : string;
begin

  lFuncoes.ConectaBD_Ini( ConectMarthi, FBLink );

  CarregarDados;
end;

procedure TTotemPrincipalfrm.Rectangle3Click(Sender: TObject);
begin
  Close;
end;

end.
