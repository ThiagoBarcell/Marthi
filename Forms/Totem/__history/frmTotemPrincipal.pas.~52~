unit frmTotemPrincipal;

interface

uses
  System.SysUtils, System.Types, System.UITypes, System.Classes, System.Variants,
  FMX.Types, FMX.Controls, FMX.Forms, FMX.Graphics, FMX.Dialogs, FMX.Objects,
  FMX.Controls.Presentation, FMX.StdCtrls, FMX.Effects, FMX.Layouts, FMX.Edit,
  FMX.ListBox, FMX.TabControl, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf, FireDAC.Stan.Def,
  FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys, FireDAC.Phys.FB,
  FireDAC.Phys.FBDef, FireDAC.FMXUI.Wait, FireDAC.Stan.Param, FireDAC.DatS,
  FireDAC.DApt.Intf, FireDAC.DApt, Data.Bind.EngExt, Fmx.Bind.DBEngExt,
  System.Rtti, System.Bindings.Outputs, Fmx.Bind.Editors, Data.Bind.Components,
  Data.Bind.DBScope, Data.DB, FireDAC.Comp.DataSet, FireDAC.Comp.Client,
  Frame.MarthiGIT.Totem;

type
  TTotemPrincipalfrm = class(TForm)
    Rectangle1: TRectangle;
    RoundRect2: TRoundRect;
    Label1: TLabel;
    Image1: TImage;
    ShadowEffect2: TShadowEffect;
    ShadowEffect3: TShadowEffect;
    ShadowEffect4: TShadowEffect;
    RoundRect1: TRoundRect;
    Label2: TLabel;
    Image2: TImage;
    ShadowEffect5: TShadowEffect;
    ShadowEffect6: TShadowEffect;
    VertScrollBox1: TVertScrollBox;
    lytTop: TLayout;
    lytModelo: TLayout;
    lytCenter: TLayout;
    RoundRect3: TRoundRect;
    ShadowEffect9: TShadowEffect;
    Image3: TImage;
    Layout1: TLayout;
    Layout3: TLayout;
    StyleBook1: TStyleBook;
    lytRodape: TLayout;
    Rectangle2: TRectangle;
    Label9: TLabel;
    Label10: TLabel;
    Edit1: TEdit;
    Layout2: TLayout;
    ConectMarthi: TFDConnection;
    qryCadCell: TFDQuery;
    qryCadCellCELL_ID: TIntegerField;
    qryCadCellCELL_MARCA: TIntegerField;
    qryCadCellCELL_DESC: TStringField;
    qryCadCellCELL_PROCESSAMENTO: TStringField;
    qryCadCellCELL_MEM_RAM: TStringField;
    qryCadCellCELL_ARMAZENAMENTO: TIntegerField;
    qryCadCellCELL_CAM_PRINC: TStringField;
    qryCadCellCELL_CAM_FRONT: TStringField;
    qryCadCellCELL_COR: TStringField;
    qryCadCellCELL_OBS: TStringField;
    qryCadCellCELL_VALOR_UNITARIO: TFMTBCDField;
    qryCadCellCELL_VALOR_PARCELADO: TFMTBCDField;
    qryCadCellDAT_CAD: TDateField;
    qryCadCellDAT_ALT: TDateField;
    qryImagensCell: TFDQuery;
    qryImagensCellCELL_ID: TIntegerField;
    qryImagensCellSEQUENCIA: TIntegerField;
    qryImagensCellIMAGE: TBlobField;
    BindSourceDB1: TBindSourceDB;
    BindingsList1: TBindingsList;
    lytGlobal: TLayout;
    lytToten: TLayout;
    Rectangle8: TRectangle;
    Rectangle9: TRectangle;
    Rectangle10: TRectangle;
    Rectangle11: TRectangle;
    Layout8: TLayout;
    lstCelulares: TListBox;
    ListCelularItem: TListBoxItem;
    BindSourceDB2: TBindSourceDB;
    LinkFillControlToField1: TLinkFillControlToField;
    BindSourceDB3: TBindSourceDB;
    procedure FormCreate(Sender: TObject);
  private
    { Private declarations }
    procedure CarregarTotem;
    procedure PreencherComboBox(CelularID: Integer);
    procedure ExibirImagensNoListBox(CelularID: Integer);
    procedure LoadData;
    procedure CarregarDados;
    function BlobToBitmap(BlobField: TField): TBitmap;
  public
    { Public declarations }
  end;

var
  TotemPrincipalfrm: TTotemPrincipalfrm;

implementation

uses
  Winapi.Windows;

{$R *.fmx}
{$R *.Surface.fmx MSWINDOWS}
{$R *.Moto360.fmx ANDROID}
{$R *.iPhone55in.fmx IOS}
{$R *.iPad.fmx IOS}
{$R *.Windows.fmx MSWINDOWS}

{ TTotemPrincipalfrm }

procedure TTotemPrincipalfrm.LoadData;
var
  ListItem: TListBoxItem;
begin
  BindSourceDB3.DataSet.First;
  while not BindSourceDB3.DataSet.Eof do
  begin
    ListItem := TListBoxItem.Create(lstCelulares);
    ListItem.Parent := lstCelulares;
    ListItem.Text := BindSourceDB1.DataSet.FieldByName('CEL_MODEL').AsString;
    ListItem.StyleLookup := 'customstyle'; // Opcional
    lstCelulares.AddObject(ListItem);
    BindSourceDB1.DataSet.Next;
  end;
end;

function TTotemPrincipalfrm.BlobToBitmap(BlobField: TField): TBitmap;
var
  Stream: TMemoryStream;
  Bitmap: TBitmap;
begin
  Bitmap := TBitmap.Create;
  Stream := TMemoryStream.Create;
  try
    (BlobField as TBlobField).SaveToStream(Stream); // Carrega os dados do campo BLOB para o stream
    Stream.Position := 0; // Volta para o início do stream
    Bitmap.LoadFromStream(Stream); // Carrega o bitmap do stream
  finally
    Stream.Free;
  end;
  Result := Bitmap;
end;

procedure TTotemPrincipalfrm.CarregarDados;
var
  Frame: TFrameTotem;
  Bitmap: TBitmap;
begin
  // Limpa os componentes existentes no VertScrollBox
  while VertScrollBox1.Content.ControlsCount > 0 do
    VertScrollBox1.Content.Controls[0].Free;

  // Percorre os dados da query
  BindSourceDB1.DataSet.First;
  while not BindSourceDB1.DataSet.Eof do
  begin
    // Cria uma instância do frame
    Frame := TFrameTotem.Create(VertScrollBox1);
    Frame.Parent := VertScrollBox1;
    Frame.Align := TAlignLayout.Top;
    Frame.Height := 100; // Ajuste conforme necessário
    Frame.Margins.Top := 5;
    Frame.Margins.Bottom := 5;

    // Converte o BLOB para TBitmap
    Bitmap := BlobToBitmap(BindSourceDB1.DataSet.FieldByName('CEL_IMAGE'));
    try
      // Preenche os dados no frame
      Frame.PreencherDados(
        BindSourceDB1.DataSet.FieldByName('CEL_MODEL').AsString,
        Bitmap
      );
    finally
      Bitmap.Free;
    end;

    // Passa para o próximo registro
    BindSourceDB1.DataSet.Next;
  end;
end;

procedure TTotemPrincipalfrm.PreencherComboBox(CelularID: Integer);
var
  Query: TFDQuery;
begin
  // Preenchendo o ComboBox de Cores
  Query := TFDQuery.Create(nil);
  try
    Query.Connection := ConectMarthi; // Sua conexão ao banco
    Query.SQL.Text := 'SELECT DISTINCT COR_DESC FROM CELL_CORES ' +
                      'JOIN CELL_ITENS ON CELL_ITENS.COR_ID = CELL_CORES.COR_ID ' +
                      'WHERE CELL_ITENS.CELL_ID = :CellID';
    Query.ParamByName('CellID').AsInteger := CelularID;
    Query.Open;

    cbbCor.Items.Clear;
    while not Query.Eof do
    begin
      cbbCor.Items.Add(Query.FieldByName('COR_DESC').AsString);
      Query.Next;
    end;

    // Seleciona o primeiro item como padrão
    if cbbCor.Items.Count > 0 then
      cbbCor.ItemIndex := 0;
  finally
    Query.Free;
  end;

  // Preenchendo o ComboBox de Armazenamento
  Query := TFDQuery.Create(nil);
  try
    Query.Connection := ConectMarthi;
    Query.SQL.Text := 'SELECT DISTINCT ARMAZENAMENTO_DESC FROM CELL_ARMAZENAMENTO ' +
                      'JOIN CELL_ITENS ON CELL_ITENS.ARMAZENAMENTO_ID = CELL_ARMAZENAMENTO.ARMAZENAMENTO_ID ' +
                      'WHERE CELL_ITENS.CELL_ID = :CellID';
    Query.ParamByName('CellID').AsInteger := CelularID;
    Query.Open;

    cbbCapacidade.Items.Clear;
    while not Query.Eof do
    begin
      cbbCapacidade.Items.Add(Query.FieldByName('ARMAZENAMENTO_DESC').AsString);
      Query.Next;
    end;

    // Seleciona o primeiro item como padrão
    if cbbCapacidade.Items.Count > 0 then
      cbbCapacidade.ItemIndex := 0;
  finally
    Query.Free;
  end;
end;

procedure TTotemPrincipalfrm.ExibirImagensNoListBox(CelularID: Integer);
var
  Query: TFDQuery;
  ListItem: TListBoxItem;
  Imagem: TImage;
  Stream: TMemoryStream;
begin
  Query := TFDQuery.Create(nil);
  try
    Query.Connection := ConectMarthi; // Sua conexão ao banco
    Query.SQL.Text := 'SELECT IMAGE_PATH FROM CELL_IMAGES WHERE CELL_ID = :CellID';
    Query.ParamByName('CellID').AsInteger := CelularID;
    Query.Open;

    lst1.Clear; // Limpa itens anteriores

    while not Query.Eof do
    begin
      ListItem := TListBoxItem.Create(Self);
      ListItem.Parent := lst1;

      // Cria a imagem dentro do ListBoxItem
      Imagem := TImage.Create(ListItem);
      Imagem.Parent := ListItem;
      Imagem.Align := TAlignLayout.Client; // Faz a imagem ocupar todo o espaço do item
//      Imagem.Margins.SetBounds(5, 5, 5, 5);

      // Se for caminho
      if not Query.FieldByName('IMAGE_PATH').IsNull then
      begin
        Imagem.Bitmap.LoadFromFile(Query.FieldByName('IMAGE_PATH').AsString);
      end;

      // Se for blob
      if not Query.FieldByName('IMAGE_BLOB').IsNull then
      begin
        Stream := TMemoryStream.Create;
        try
          TBlobField(Query.FieldByName('IMAGE_BLOB')).SaveToStream(Stream);
          Stream.Position := 0;
          Imagem.Bitmap.LoadFromStream(Stream);
        finally
          Stream.Free;
        end;
      end;

      ListBoxImagens.AddObject(ListItem);
      Query.Next;
    end;
  finally
    Query.Free;
  end;
end;

procedure TTotemPrincipalfrm.FormCreate(Sender: TObject);
begin
  CarregarDados;
end;

procedure TTotemPrincipalfrm.CarregarTotem;
var
  Query: TFDQuery; // Exemplo com FireDAC
  Bloco: TPanel;
  NomeLabel, CapacidadeLabel, ValorLabel: TLabel;
  ImagemCelular: TImage;
  Y: Integer;
begin
  Y := 10; // Posição inicial
  Query := TFDQuery.Create(nil);
  try
    Query.Connection := ConectMarthi; // Sua conexão ao banco de dados
    Query.SQL.Text := 'SELECT NOME, CAPACIDADE, IMAGEM, VALOR FROM CAD_CELL';
    Query.Open;

    while not Query.Eof do
    begin
      // Painel que agrupa os componentes
      Bloco := TPanel.Create(VertScrollBox1);
      Bloco.Parent := VertScrollBox1;
      Bloco.Position.Y := Y;
      Bloco.Width := VertScrollBox1.Width - 20;
      Bloco.Height := 150; // Tamanho fixo do bloco
      Bloco.Align := TAlignLayout.Top;
      Bloco.Margins.Top := 10;

      // Nome do Celular
      NomeLabel := TLabel.Create(Bloco);
      NomeLabel.Parent := Bloco;
      NomeLabel.Text := Query.FieldByName('NOME').AsString;
      NomeLabel.Position.Y := 10;
      NomeLabel.Position.X := 10;

      // Capacidade
      CapacidadeLabel := TLabel.Create(Bloco);
      CapacidadeLabel.Parent := Bloco;
      CapacidadeLabel.Text := Query.FieldByName('CAPACIDADE').AsString;
      CapacidadeLabel.Position.Y := NomeLabel.Position.Y + NomeLabel.Height + 5;
      CapacidadeLabel.Position.X := 10;

      // Imagem do Celular
      ImagemCelular := TImage.Create(Bloco);
      ImagemCelular.Parent := Bloco;
      ImagemCelular.Position.X := 10;
      ImagemCelular.Position.Y := CapacidadeLabel.Position.Y + CapacidadeLabel.Height + 5;
      ImagemCelular.Width := 100;
      ImagemCelular.Height := 100;
      ImagemCelular.Bitmap.LoadFromStream(Query.CreateBlobStream(Query.FieldByName('IMAGEM'), bmRead));

      // Valor
      ValorLabel := TLabel.Create(Bloco);
      ValorLabel.Parent := Bloco;
      ValorLabel.Text := 'R$ ' + FormatFloat('0.00', Query.FieldByName('VALOR').AsFloat);
      ValorLabel.Position.X := ImagemCelular.Position.X + ImagemCelular.Width + 10;
      ValorLabel.Position.Y := ImagemCelular.Position.Y;

      // Incrementa a posição
      Y := Y + Bloco.Height + 10;

      Query.Next;
    end;
  finally
    Query.Free;
  end;

end;

end.
